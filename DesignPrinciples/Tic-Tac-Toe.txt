1. What design principles does this code violate?
	Single Resposibility principle.
	The Game class should use a board class so that it isn't doing two things at once.
	It should be able to use a board class so that if we change board structure in the 
	future, the Game class doesn't even know the difference. 
2. Refactor the code to improve its design.

Game.java


public class Board {
	
	Some Data Type to represent the board.
	
	public char winner() { ... }
	
	public void play() { ... }
}


public class Game {
   public Board board;

   public Game(Board board) {board = new Board;}

   public Game(Board board, int position, char player) {
      board = new Board();
      board.append(s);
      board.setCharAt(position, player);
   }

   public int move(char player) {
      for (int i = 0; i < 9; i++) {
         if (board.charAt(i) == '-') {
            Game game = play(i, player);
            if (game.winner() == player)
               return i;
         }
      }

      for (int i = 0; i < 9; i++) {
         if (board.charAt(i) == '-')
            return i;
      }
      return -1;
   }

   public Game play(int i, char player) {
      return new board.play()
   }

   public char winner() {
       return board.winner()

   }
}

GameTest.java

import junit.framework.*;

public class GameTest extends TestCase {

   public GameTest(String s) {super(s);}

   public void testDefaultMove() {
      Game game = new Game("XOXOX-OXO");
      assertEquals(5, game.move('X'));

      game = new Game("XOXOXOOX-");
      assertEquals(8, game.move('O'));

      game = new Game("---------");
      assertEquals(0, game.move('X'));

      game = new Game("XXXXXXXXX");
      assertEquals(-1, game.move('X'));
   }

   public void testFindWinningMove() {
      Game game = new Game("XO-XX-OOX");
      assertEquals(5, game.move('X'));
   }
   public void testWinConditions() {
      Game game = new Game("---XXX---");
      assertEquals('X', game.winner());
   }
}

